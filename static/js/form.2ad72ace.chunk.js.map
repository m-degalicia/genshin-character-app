{"version":3,"file":"static/js/form.2ad72ace.chunk.js","mappings":"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","sources":["app/hooks.ts","pages/table/TableForm.tsx","utils/useFetchCharactersList.ts"],"sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useEffect } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { useForm, Controller, SubmitHandler } from \"react-hook-form\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Container from \"@mui/material/Container\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormHelperText from \"@mui/material/FormHelperText\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport Select from \"@mui/material/Select\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nimport { useAppSelector, useAppDispatch } from \"app/hooks\";\r\nimport {\r\n  selectCharacterById,\r\n  characterAdded,\r\n  characterUpdated,\r\n} from \"redux/genshinCharacters/genshinCharactersSlice\";\r\nimport {\r\n  ElementsList,\r\n  NationsList,\r\n  RarityList,\r\n  WeaponsList,\r\n} from \"constants/index\";\r\nimport routes from \"routes/routes\";\r\nimport { Element, Nation, Rarity, Weapon } from \"types/Attributes\";\r\n\r\nimport useFetchCharactersList from \"utils/useFetchCharactersList\";\r\n\r\ntype FormInputs = {\r\n  name: string;\r\n  affiliation: string;\r\n  vision: string;\r\n  nation: string;\r\n  weapon: string;\r\n  rarity: number;\r\n};\r\n\r\nconst TableForm = () => {\r\n  const navigate = useNavigate();\r\n  const dispatch = useAppDispatch();\r\n  const { id } = useParams();\r\n  useFetchCharactersList();\r\n  const isEdit = typeof id !== \"undefined\";\r\n  const characterListStatus = useAppSelector(\r\n    (state) => state.genshinCharacters.status\r\n  );\r\n  const isInit =\r\n    characterListStatus === \"idle\" || characterListStatus === \"loading\";\r\n  const characterSelect = useAppSelector((state) =>\r\n    selectCharacterById(state, id ?? \"0\")\r\n  );\r\n  const { handleSubmit, control, reset } = useForm<FormInputs>();\r\n\r\n  useEffect(() => {\r\n    if (typeof characterSelect !== \"undefined\") {\r\n      reset({\r\n        name: characterSelect.name,\r\n        nation: characterSelect.nation,\r\n        rarity: characterSelect.rarity,\r\n        vision: characterSelect.vision,\r\n        weapon: characterSelect.weapon,\r\n        affiliation: characterSelect.affiliation,\r\n      });\r\n    }\r\n  }, [characterSelect, reset]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !(characterListStatus === \"idle\" || characterListStatus === \"loading\") &&\r\n      typeof id !== \"undefined\" &&\r\n      typeof characterSelect === \"undefined\"\r\n    ) {\r\n      navigate(routes.error404());\r\n    }\r\n  }, [characterListStatus, id, characterSelect, navigate]);\r\n\r\n  const _handleSubmit: SubmitHandler<FormInputs> = (data) => {\r\n    if (isEdit) {\r\n      dispatch(characterUpdated({ ...data, id }));\r\n      navigate(routes.table());\r\n    } else {\r\n      dispatch(characterAdded({ ...data, id: nanoid() }));\r\n      navigate(routes.table());\r\n    }\r\n  };\r\n\r\n  if (isEdit && isInit) {\r\n    return <div />;\r\n  }\r\n\r\n  if (isEdit && characterListStatus === \"failed\") {\r\n    return <div>Error fetching data</div>;\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"xs\">\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <Typography component=\"h1\" variant=\"h5\" sx={{ mb: 1 }}>\r\n          {`${isEdit ? \"Edit\" : \"Create\"} Character`}\r\n        </Typography>\r\n        <form\r\n          style={{ width: \"100%\" }}\r\n          onSubmit={handleSubmit(_handleSubmit)}\r\n          noValidate\r\n        >\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <FormControl fullWidth required>\r\n                <Controller\r\n                  name=\"name\"\r\n                  control={control}\r\n                  defaultValue=\"\"\r\n                  rules={{ required: \"Name required\" }}\r\n                  render={({\r\n                    field: { onChange, value },\r\n                    fieldState: { error },\r\n                  }) => (\r\n                    <TextField\r\n                      autoComplete=\"name\"\r\n                      variant=\"outlined\"\r\n                      fullWidth\r\n                      required\r\n                      label=\"Name\"\r\n                      value={value}\r\n                      onChange={onChange}\r\n                      autoFocus\r\n                      error={!!error}\r\n                      helperText={error ? error.message : null}\r\n                    />\r\n                  )}\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Controller\r\n                name=\"affiliation\"\r\n                control={control}\r\n                defaultValue=\"\"\r\n                rules={{ required: \"Affiliation required\" }}\r\n                render={({\r\n                  field: { onChange, value },\r\n                  fieldState: { error },\r\n                }) => (\r\n                  <TextField\r\n                    autoComplete=\"affiliation\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    required\r\n                    label=\"Affiliation\"\r\n                    value={value}\r\n                    onChange={onChange}\r\n                    error={!!error}\r\n                    helperText={error ? error.message : null}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Controller\r\n                control={control}\r\n                name=\"vision\"\r\n                defaultValue=\"\"\r\n                rules={{ required: \"Element Vision required\" }}\r\n                render={({\r\n                  field: { onChange, value },\r\n                  fieldState: { error },\r\n                }) => (\r\n                  <FormControl fullWidth required error={!!error}>\r\n                    <InputLabel>Vision</InputLabel>\r\n                    <Select\r\n                      value={value}\r\n                      label=\"Vision\"\r\n                      onChange={onChange}\r\n                      sx={{ textAlign: \"start\" }}\r\n                    >\r\n                      {ElementsList.map((element: Element) => (\r\n                        <MenuItem value={element} key={element}>\r\n                          {element}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                    <FormHelperText>\r\n                      {error ? error.message : \"Required\"}\r\n                    </FormHelperText>\r\n                  </FormControl>\r\n                )}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Controller\r\n                control={control}\r\n                name=\"weapon\"\r\n                defaultValue=\"\"\r\n                rules={{ required: \"Weapon type required\" }}\r\n                render={({\r\n                  field: { onChange, value },\r\n                  fieldState: { error },\r\n                }) => (\r\n                  <FormControl fullWidth required error={!!error}>\r\n                    <InputLabel>Weapon</InputLabel>\r\n                    <Select\r\n                      value={value}\r\n                      label=\"Weapon\"\r\n                      onChange={onChange}\r\n                      sx={{ textAlign: \"start\" }}\r\n                    >\r\n                      {WeaponsList.map((weapon: Weapon) => (\r\n                        <MenuItem value={weapon} key={weapon}>\r\n                          {weapon}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                    <FormHelperText>\r\n                      {error ? error.message : \"Required\"}\r\n                    </FormHelperText>\r\n                  </FormControl>\r\n                )}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Controller\r\n                control={control}\r\n                name=\"nation\"\r\n                defaultValue=\"\"\r\n                rules={{ required: \"Nation required\" }}\r\n                render={({\r\n                  field: { onChange, value },\r\n                  fieldState: { error },\r\n                }) => (\r\n                  <FormControl fullWidth required error={!!error}>\r\n                    <InputLabel>Nation</InputLabel>\r\n                    <Select\r\n                      value={value}\r\n                      label=\"Nation\"\r\n                      onChange={onChange}\r\n                      sx={{ textAlign: \"start\" }}\r\n                    >\r\n                      {NationsList.map((nation: Nation) => (\r\n                        <MenuItem value={nation} key={nation}>\r\n                          {nation}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                    <FormHelperText>\r\n                      {error ? error.message : \"Required\"}\r\n                    </FormHelperText>\r\n                  </FormControl>\r\n                )}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Controller\r\n                control={control}\r\n                name=\"rarity\"\r\n                defaultValue={4}\r\n                rules={{ required: \"Rarity required\" }}\r\n                render={({\r\n                  field: { onChange, value },\r\n                  fieldState: { error },\r\n                }) => (\r\n                  <FormControl fullWidth required error={!!error}>\r\n                    <InputLabel>Rarity</InputLabel>\r\n                    <Select\r\n                      value={value}\r\n                      label=\"Rarity\"\r\n                      onChange={onChange}\r\n                      sx={{ textAlign: \"start\" }}\r\n                    >\r\n                      {RarityList.map((rating: Rarity) => (\r\n                        <MenuItem value={rating} key={rating}>\r\n                          {rating}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                    <FormHelperText>\r\n                      {error ? error.message : \"Required\"}\r\n                    </FormHelperText>\r\n                  </FormControl>\r\n                )}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Stack direction=\"row\" spacing={2} sx={{ mt: 2 }}>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={{ flex: 1 }}\r\n            >\r\n              {isEdit ? \"Edit\" : \"Create\"}\r\n            </Button>\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"error\"\r\n              onClick={() => navigate(-1)}\r\n              sx={{ flex: 1 }}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </Stack>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TableForm;\r\n","import { useEffect } from 'react';\r\nimport { useAppSelector, useAppDispatch } from \"app/hooks\";\r\nimport {\r\n  fetchCharactersList,\r\n} from \"redux/genshinCharacters/genshinCharactersSlice\";\r\n\r\nconst useFetchCharactersList = () => {\r\n  const characterListStatus = useAppSelector(\r\n    (state) => state.genshinCharacters.status\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (characterListStatus === \"idle\") {\r\n      dispatch(fetchCharactersList());\r\n    }\r\n  }, [characterListStatus, dispatch]);\r\n};\r\n\r\nexport default useFetchCharactersList;\r\n"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","navigate","useNavigate","dispatch","id","useParams","useFetchCharactersList","isEdit","characterListStatus","state","genshinCharacters","status","isInit","characterSelect","selectCharacterById","useForm","handleSubmit","control","reset","useEffect","name","nation","rarity","vision","weapon","affiliation","routes","maxWidth","style","display","flexDirection","alignItems","component","variant","sx","mb","width","onSubmit","data","characterUpdated","characterAdded","nanoid","noValidate","container","spacing","item","xs","fullWidth","required","defaultValue","rules","render","field","onChange","value","error","fieldState","autoComplete","label","autoFocus","helperText","message","textAlign","ElementsList","element","WeaponsList","NationsList","RarityList","rating","direction","mt","type","color","flex","onClick","fetchCharactersList"],"sourceRoot":""}