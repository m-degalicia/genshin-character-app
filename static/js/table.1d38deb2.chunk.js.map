{"version":3,"file":"static/js/table.1d38deb2.chunk.js","mappings":"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","sources":["app/hooks.ts","components/ConfirmDialog.tsx","pages/table/index.tsx","utils/useFetchCharactersList.ts"],"sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\n\r\nexport interface ConfirmDialogProps {\r\n  name: string;\r\n  open: boolean;\r\n  setOpen: any;\r\n  onConfirm: () => void;\r\n}\r\n\r\nconst ConfirmDialog = (props: ConfirmDialogProps) => {\r\n  const { name, open, setOpen, onConfirm } = props;\r\n  return (\r\n    <Dialog open={open} onClose={() => setOpen(false)}>\r\n      <DialogTitle id=\"confirm-dialog\">Delete</DialogTitle>\r\n      <DialogContent>Do you want to delete {name}?</DialogContent>\r\n      <DialogActions>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => setOpen(false)}\r\n          color=\"secondary\"\r\n        >\r\n          No\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            setOpen(false);\r\n            onConfirm();\r\n          }}\r\n          color=\"error\"\r\n        >\r\n          Yes\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default ConfirmDialog;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {\r\n  DataGrid,\r\n  GridColDef,\r\n  GridToolbarContainer,\r\n  GridToolbarFilterButton,\r\n  GridValueGetterParams,\r\n} from \"@mui/x-data-grid\";\r\n\r\nimport { useAppSelector, useAppDispatch } from \"app/hooks\";\r\nimport routes from \"routes/routes\";\r\n\r\nimport ConfirmDialog from \"components/ConfirmDialog\";\r\n\r\nimport {\r\n  selectCharacterList,\r\n  characterRemoved,\r\n} from \"redux/genshinCharacters/genshinCharactersSlice\";\r\n\r\nimport useFetchCharactersList from \"utils/useFetchCharactersList\";\r\n\r\nconst DataGridToolbar = () => (\r\n  <GridToolbarContainer>\r\n    <GridToolbarFilterButton />\r\n  </GridToolbarContainer>\r\n);\r\n\r\nconst getActionInfo = (params: GridValueGetterParams) => {\r\n  return { id: params.row.id, name: params.row.name };\r\n};\r\n\r\nconst TablePage = () => {\r\n  useFetchCharactersList();\r\n  const characterList = useAppSelector(selectCharacterList);\r\n  const characterListStatus = useAppSelector(\r\n    (state) => state.genshinCharacters.status\r\n  );\r\n  const dispatch = useAppDispatch();\r\n  const [pageSize, setPageSize] = useState<number>(5);\r\n  const [open, setOpen] = useState(false);\r\n  const [dialogName, setDialogName] = useState(\"\");\r\n  const [dialogId, setDialogId] = useState(\"\");\r\n  const isInit =\r\n    characterListStatus === \"idle\" || characterListStatus === \"loading\";\r\n\r\n  const handleDialogOpen = (name: string, id: string) => {\r\n    setDialogName(name);\r\n    setDialogId(id);\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    dispatch(characterRemoved({ id: dialogId }));\r\n    setDialogName(\"\");\r\n    setDialogId(\"\");\r\n  };\r\n\r\n  const columns: GridColDef[] = [\r\n    { field: \"name\", headerName: \"Name\", flex: 1, minWidth: 150 },\r\n    { field: \"vision\", headerName: \"Vision\" },\r\n    { field: \"weapon\", headerName: \"Weapon\" },\r\n    { field: \"nation\", headerName: \"Nation\" },\r\n    { field: \"affiliation\", headerName: \"Affiliation\", width: 200 },\r\n    { field: \"rarity\", headerName: \"Rarity\" },\r\n    {\r\n      field: \"action\",\r\n      headerName: \"Actions\",\r\n      width: 200,\r\n      valueGetter: getActionInfo,\r\n      renderCell: (params: GridValueGetterParams<any>) => (\r\n        <>\r\n          <Link\r\n            to={`${routes.tableEdit()}${params.value.id}`}\r\n            style={{ textDecoration: \"none\" }}\r\n          >\r\n            <Button variant=\"contained\" color=\"primary\" size=\"small\">\r\n              Edit\r\n            </Button>\r\n          </Link>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"error\"\r\n            size=\"small\"\r\n            style={{ marginLeft: 16 }}\r\n            onClick={() => handleDialogOpen(params.value.name, params.value.id)}\r\n          >\r\n            Delete\r\n          </Button>\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  if (isInit) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (characterListStatus === \"failed\") {\r\n    return <div>Error fetching data</div>;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        flexDirection: \"column\",\r\n      }}\r\n    >\r\n      <Link\r\n        to={routes.tableCreate()}\r\n        style={{ textDecoration: \"none\", width: \"100%\", display: \"flex\" }}\r\n      >\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          size=\"medium\"\r\n          sx={{ mb: 2 }}\r\n        >\r\n          Create Character\r\n        </Button>\r\n      </Link>\r\n      <div style={{ flexGrow: 1 }}>\r\n        <DataGrid\r\n          autoHeight\r\n          rows={characterList}\r\n          columns={columns}\r\n          pageSize={pageSize}\r\n          onPageSizeChange={(newPageSize) => setPageSize(newPageSize)}\r\n          rowsPerPageOptions={[5, 10, 20, 50]}\r\n          pagination\r\n          components={{ Toolbar: DataGridToolbar }}\r\n          disableSelectionOnClick\r\n        />\r\n      </div>\r\n      <ConfirmDialog\r\n        open={open}\r\n        setOpen={setOpen}\r\n        name={dialogName}\r\n        onConfirm={handleDelete}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TablePage;\r\n","import { useEffect } from 'react';\r\nimport { useAppSelector, useAppDispatch } from \"app/hooks\";\r\nimport {\r\n  fetchCharactersList,\r\n} from \"redux/genshinCharacters/genshinCharactersSlice\";\r\n\r\nconst useFetchCharactersList = () => {\r\n  const characterListStatus = useAppSelector(\r\n    (state) => state.genshinCharacters.status\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (characterListStatus === \"idle\") {\r\n      dispatch(fetchCharactersList());\r\n    }\r\n  }, [characterListStatus, dispatch]);\r\n};\r\n\r\nexport default useFetchCharactersList;\r\n"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","props","name","open","setOpen","onConfirm","Dialog","onClose","DialogTitle","id","DialogContent","DialogActions","Button","variant","onClick","color","DataGridToolbar","GridToolbarContainer","GridToolbarFilterButton","getActionInfo","params","row","useFetchCharactersList","characterList","selectCharacterList","characterListStatus","state","genshinCharacters","status","dispatch","useState","pageSize","setPageSize","dialogName","setDialogName","dialogId","setDialogId","columns","field","headerName","flex","minWidth","width","valueGetter","renderCell","to","routes","value","style","textDecoration","size","marginLeft","display","height","flexDirection","sx","mb","flexGrow","DataGrid","autoHeight","rows","onPageSizeChange","newPageSize","rowsPerPageOptions","pagination","components","Toolbar","disableSelectionOnClick","characterRemoved","useEffect","fetchCharactersList"],"sourceRoot":""}