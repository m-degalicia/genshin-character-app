{"version":3,"file":"static/js/chart.5356ab23.chunk.js","mappings":"wMAIaA,EAAiB,kBAAMC,EAAAA,EAAAA,OACvBC,EAAkDC,EAAAA,I,mICM/DC,EAAAA,GAAAA,SAAiBC,EAAAA,GAAYC,EAAAA,EAASC,EAAAA,IAyDtC,UAvDkB,YAChBC,EAAAA,EAAAA,KACA,IAAMC,GAAsBP,EAAAA,EAAAA,IAC1B,SAACQ,GAAD,OAAWA,EAAMC,kBAAkBC,UAE/BC,GAAwBX,EAAAA,EAAAA,GAAeY,EAAAA,IAI7C,GAF0B,SAAxBL,GAA0D,YAAxBA,EAGlC,OAAO,wCAGT,GAA4B,WAAxBA,EACF,OAAO,iDAET,IAAMM,EAAO,CACXC,QAAO,OAAKC,EAAAA,IACZC,SAAU,CACR,CACEC,MAAO,mCACPJ,KAAMF,EACNO,gBAAiB,CACf,qBACA,qBACA,oBACA,qBACA,oBACA,qBACA,wBAMR,OACE,UAAC,IAAD,CACEC,GAAI,CACFC,QAAS,OACTC,MAAO,CAAEC,GAAI,QAASC,GAAI,QAASC,GAAI,QAASC,GAAI,SACpDC,cAAe,UAJnB,WAOE,+DACA,mBACA,SAAC,KAAD,CACEb,KAAMA,EACNc,QAAS,CACPC,YAAa,U,uDC1CvB,IAb+B,WAC7B,IAAMrB,GAAsBP,EAAAA,EAAAA,IAC1B,SAACQ,GAAD,OAAWA,EAAMC,kBAAkBC,UAE/BmB,GAAW/B,EAAAA,EAAAA,MAEjBgC,EAAAA,EAAAA,YAAU,WACoB,SAAxBvB,GACFsB,GAASE,EAAAA,EAAAA,SAEV,CAACxB,EAAqBsB","sources":["app/hooks.ts","pages/chart/index.tsx","utils/useFetchCharactersList.ts"],"sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from \"react\";\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\r\nimport { Pie } from \"react-chartjs-2\";\r\nimport Container from \"@mui/material/Container\";\r\n\r\nimport { useAppSelector } from \"app/hooks\";\r\nimport { ElementsList } from \"constants/index\";\r\nimport useFetchCharactersList from \"utils/useFetchCharactersList\";\r\n\r\nimport { selectCharacterElementCount } from \"redux/genshinCharacters/genshinCharactersSlice\";\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\nconst ChartPage = () => {\r\n  useFetchCharactersList();\r\n  const characterListStatus = useAppSelector(\r\n    (state) => state.genshinCharacters.status\r\n  );\r\n  const characterElementCount = useAppSelector(selectCharacterElementCount);\r\n  const isInit =\r\n    characterListStatus === \"idle\" || characterListStatus === \"loading\";\r\n\r\n  if (isInit) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (characterListStatus === \"failed\") {\r\n    return <div>Error fetching data</div>;\r\n  }\r\n  const data = {\r\n    labels: [...ElementsList],\r\n    datasets: [\r\n      {\r\n        label: \"Number of characters per element\",\r\n        data: characterElementCount,\r\n        backgroundColor: [\r\n          \"rgb(133, 193, 171)\",\r\n          \"rgb(171, 213, 227)\",\r\n          \"rgb(171, 199, 76)\",\r\n          \"rgb(172, 145, 192)\",\r\n          \"rgb(237, 183, 70)\",\r\n          \"rgb(108, 193, 238)\",\r\n          \"rgb(225, 129, 65)\",\r\n        ],\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container\r\n      sx={{\r\n        display: \"flex\",\r\n        width: { xs: \"300px\", sm: \"500px\", md: \"600px\", lg: \"800px\" },\r\n        flexDirection: \"column\",\r\n      }}\r\n    >\r\n      <div>Number of Characters per element</div>\r\n      <br />\r\n      <Pie\r\n        data={data}\r\n        options={{\r\n          aspectRatio: 1,\r\n        }}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ChartPage;\r\n","import { useEffect } from 'react';\r\nimport { useAppSelector, useAppDispatch } from \"app/hooks\";\r\nimport {\r\n  fetchCharactersList,\r\n} from \"redux/genshinCharacters/genshinCharactersSlice\";\r\n\r\nconst useFetchCharactersList = () => {\r\n  const characterListStatus = useAppSelector(\r\n    (state) => state.genshinCharacters.status\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (characterListStatus === \"idle\") {\r\n      dispatch(fetchCharactersList());\r\n    }\r\n  }, [characterListStatus, dispatch]);\r\n};\r\n\r\nexport default useFetchCharactersList;\r\n"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","ChartJS","ArcElement","Tooltip","Legend","useFetchCharactersList","characterListStatus","state","genshinCharacters","status","characterElementCount","selectCharacterElementCount","data","labels","ElementsList","datasets","label","backgroundColor","sx","display","width","xs","sm","md","lg","flexDirection","options","aspectRatio","dispatch","useEffect","fetchCharactersList"],"sourceRoot":""}